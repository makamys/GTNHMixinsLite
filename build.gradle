buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            // GTNH ForgeGradle Fork
            name = "GTNH Maven"
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.11'
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}
apply plugin: 'forge'

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

version = "2.1.4"
group = "com.gtnewhorizon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "gtnhmixinslite"

configurations {
    repackMixin
    repackMixinSources
    repackMixinProcessor
    annotationProcessor
    sources {
        transitive = false
    }
}

subprojects {
    apply plugin: 'java'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext {
    mixinVersion = '0.8.5-GTNH-1'
    mixinExtrasVersion = '0.1.1'
    asmVersion = '7.2'

    mixinSrg = new File(buildDir, "mixins/mixins.gtnhmixins.srg")
    mixinRefMap = new File(buildDir, "mixins/mixins.gtnhmixins.refmap.json")
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
}

repositories {
    mavenLocal()
    maven {
        // GTNH ForgeGradle Fork
        name = "GTNH Maven"
        url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
    }
    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }
    flatDir {
        dirs 'dependencies'
    }
}

dependencies {
    implementation name: "mixin-$mixinVersion-repack"
    annotationProcessor name: "mixin-$mixinVersion-processor-repack"
}

reobf {
    if (mixinSrg.exists()) {
        addExtraSrgFile mixinSrg
    }
}

task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from plugins.getPlugin("forge").delayedFile('{SRG_DIR}')
    include '**/*.srg'
    into 'build/srgs'
}

compileJava {
    dependsOn copySrgs
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
    options.encoding = 'UTF-8'
}


jar {
    manifest {
        attributes([
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                'FMLCorePluginContainsFMLMod': 'true',
                "FMLCorePlugin"              : "com.gtnewhorizon.gtnhmixins.core.GTNHMixinsCore",
                "MixinConfigs"               : "mixins.gtnhmixins.json",
                "TweakOrder"                 : -2147483648,
                "ForceLoadAsMod"             : true
        ])
    }
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "modId", project.modId

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'modId': project.modId
    }
    
    // replace stuff in mcmod.info, nothing else
    from(file(".")) {
        include 'README.md'
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName

            artifact(jar) {
                builtBy jar
            }
        }
    }
    repositories {
        maven {
            url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases"
            credentials {
                username = System.getenv("MAVEN_USER") ?: "NONE"
                password = System.getenv("MAVEN_PASSWORD") ?: "NONE"
            }
        }
    }
}
